// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  discordId String @unique
  username  String

  signupCategories SignupUserJunction[]
  playerAccounts   Player[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Signup {
  id         Int              @id @default(autoincrement())
  name       String?
  serverId   String
  channelId  String
  messageId  String           @unique
  categories SignupCategory[]
}

model SignupCategory {
  id        Int     @id @default(autoincrement())
  signup    Signup  @relation(fields: [signupId], references: [id])
  signupId  Int
  name      String
  isFocused Boolean @default(false)
  limit     Int     @default(-1)
  isLocked  Boolean @default(false)
  emoji     String?

  users      SignupUserJunction[]
  buttonName String? // Uses the name if not set

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SignupUserJunction {
  id               Int            @id @default(autoincrement())
  signupCategory   SignupCategory @relation(fields: [signupCategoryId], references: [id])
  signupCategoryId Int
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
}

// Vote Counter

model Player {
  id            Int    @id @default(autoincrement())
  voteCounterId Int
  discordId     String

  voteCounter   VoteCounter @relation(fields: [voteCounterId], references: [id])
  user          User        @relation(fields: [discordId], references: [discordId])
  votesIncoming Vote[]      @relation(name: "votedTarget")
  votesOutgoing Vote[]      @relation(name: "voter")

  @@unique([voteCounterId, discordId])
}

model VoteCounter {
  id        Int      @id @default(autoincrement())
  channelId String   @unique
  votes     Vote[]
  players   Player[]

  currentRound     Int      @default(1)
  currentIteration Int      @default(0)
  lastCheckedVotes DateTime @default(now())

  noLynch  Boolean @default(true)
  majority Boolean @default(true)
}

model Vote {
  id            Int  @id @default(autoincrement())
  voteCounterId Int
  votedTargetId Int?
  voterId       Int

  voteCounter VoteCounter @relation(fields: [voteCounterId], references: [id])
  votedTarget Player?     @relation(fields: [votedTargetId], references: [id], name: "votedTarget")
  voter       Player      @relation(fields: [voterId], references: [id], name: "voter")
  reason      String?

  isNoLynch Boolean @default(false)

  createdAt DateTime @default(now())
}
